import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load image
image = cv2.imread("images/image3.png")
original_image = image.copy()  # Make a copy for displaying the original image

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply GaussianBlur to reduce noise and improve contour detection
blurred = cv2.GaussianBlur(gray, (5, 5), 0)



# Use HoughCircles to detect circles
circles = cv2.HoughCircles(
    blurred, cv2.HOUGH_GRADIENT, dp=1.0, minDist=200, param1=50, param2=45, minRadius=100, maxRadius=200
)

if circles is not None:
    circles = np.uint16(np.around(circles))
    for i in circles[0, :]:
        # Draw the outer circle
        cv2.circle(image, (i[0], i[1]), i[2], (0, 255, 0), 2)
        # Draw the center of the circle
        cv2.circle(image, (i[0], i[1]), 2, (0, 0, 255), 3)

# Display the original and LBP images
plt.figure(figsize=(10, 7))

plt.subplot(1, 2, 1)
plt.imshow(original_image, cmap='gray')
plt.title("Original Image")

plt.subplot(1, 2, 2)
plt.imshow(image, cmap='gray')
plt.title("Circle Detection")

plt.tight_layout()
plt.show()

cv2.waitKey(0)
cv2.destroyAllWindows()
